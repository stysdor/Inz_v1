using IronPython.Hosting;
using Microsoft.Scripting.Hosting;
using System.Diagnostics;
using System.IO;

namespace BusinessLogic.Logic.SI
{
    public class ScriptReader
    {
        public void PatchParameter()
        {
            dynamic engine = Python.CreateEngine(); // Extract Python language engine from their grasp
            var scope = engine.CreateScope(); // Introduce Python namespace (scope)
            //var d = new Dictionary<string, object>
            //{
            //    { "serviceid", serviceid},
            //    { "parameter", parameter}
            //}; // Add some sample parameters. Notice that there is no need in specifically setting the object type, interpreter will do that part for us in the script properly with high probability

            //scope.SetVariable("params", d); // This will be the name of the dictionary in python script, initialized with previously created .NET Dictionary
            ScriptSource source = engine.CreateScriptSourceFromFile("Script.exe"); // Load the script
            object result = source.Execute(scope);
            
          
        }

        public string run_cmd()
        {
            ProcessStartInfo start = new ProcessStartInfo();
            start.FileName = "C:/Users/Dorota/source/repos/Inz_v1/BusinessLogic/Logic/SI/Script.exe";
         //   start.Arguments = string.Format("\"{0}\" \"{1}\"", cmd, args);
            start.UseShellExecute = false;// Do not use OS shell
            start.CreateNoWindow = true; // We don't need new window
            start.RedirectStandardOutput = true;// Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    string result = reader.ReadToEnd(); // Here is the result of StdOut(for example: print "test")
                    return result;
                }
            }
        }
    }
}
